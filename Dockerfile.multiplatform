
# Set environment Global variables
ARG OPENCV_VERSION="4.11.0"
ARG GOLANG_VERSION="1.23.5"

##### Stage 1: Build OpenCV for amd64
FROM ubuntu:latest AS opencv-builder-amd64
ENV GOOS=linux
ENV GOARCH=amd64
WORKDIR /app





# Install dependencies for building OpenCV from source
RUN apt-get update && apt-get install -y \
    ca-certificates\
    build-essential \
    cmake \
    git \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libopenexr-dev \
    libwebp-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    python3-dev \
    python3-numpy \
    pkgconf

# Download OpenCV and OpenCV Contrib
RUN git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git && \
    cd opencv && \
    git checkout ${OPENCV_VERSION} && \
    cd ../opencv_contrib && \
    git checkout ${OPENCV_VERSION}

# Create build directory and configure OpenCV
WORKDIR /app/opencv/build

RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PKGCONFIG_DIR=/usr/local/lib/pkgconfig \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
    -D WITH_FFMPEG=YES \
    -D WITH_V4L=ON \
    -D WITH_LIBV4L=ON \
    -D WITH_PROTOBUF=ON \
    -D INSTALL_C_EXAMPLES=NO \
    -D INSTALL_PYTHON_EXAMPLES=NO \
    -D BUILD_ANDROID_EXAMPLES=NO \
    -D BUILD_DOCS=NO \
    -D BUILD_TESTS=NO \
    -D BUILD_PERF_TESTS=NO \
    -D BUILD_EXAMPLES=NO \
    -D BUILD_opencv_java=NO \
    -D BUILD_opencv_python=NO \
    -D BUILD_opencv_python2=NO \
    -D BUILD_opencv_python3=YES \
    -D OPENCV_GENERATE_PKGCONFIG=ON .. > cmake_output.txt 2>&1

RUN make -j$(nproc) || { cat /app/opencv/build/CMakeFiles/CMakeError.log; exit 1; } && \
    make install && \
    ldconfig

# Verification
RUN python3 -c "import cv2; print(cv2.__version__)"



####### Stage 2: Build OpenCV for arm64
FROM ubuntu:latest AS opencv-builder-arm64
ENV GOOS=linux
ENV GOARCH=arm64
WORKDIR /app


# Install dependencies for building OpenCV from source (ARM versions)
# The packages below are a good starting point but you'll need to adapt them
# to your specific needs and the packages available for your target ARM distro.
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    python3-dev \
    python3-numpy \
    pkgconf


# Download OpenCV and OpenCV Contrib
RUN git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git && \
    cd opencv && \
    git checkout ${OPENCV_VERSION} && \
    cd ../opencv_contrib && \
    git checkout ${OPENCV_VERSION}


# Create build directory and configure OpenCV (ARM specific)
WORKDIR /app/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PKGCONFIG_DIR=/usr/local/lib/pkgconfig \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
    -D WITH_FFMPEG=YES \
    -D WITH_V4L=ON \
    -D WITH_LIBV4L=ON \
    -D WITH_PROTOBUF=ON \
    -D INSTALL_C_EXAMPLES=NO \
    -D INSTALL_PYTHON_EXAMPLES=NO \
    -D BUILD_ANDROID_EXAMPLES=NO \
    -D BUILD_DOCS=NO \
    -D BUILD_TESTS=NO \
    -D BUILD_PERF_TESTS=NO \
    -D BUILD_EXAMPLES=NO \
    -D BUILD_opencv_java=NO \
    -D BUILD_opencv_python=NO \
    -D BUILD_opencv_python2=NO \
    -D BUILD_opencv_python3=YES \
    -D OPENCV_GENERATE_PKGCONFIG=ON .. > cmake_output.txt 2>&1

RUN make -j$(nproc) || { cat /app/opencv/build/CMakeFiles/CMakeError.log; exit 1; } && \
    make install && \
    ldconfig





###### Stage 3: Build Go for amd64
FROM golang:1.23-alpine AS builder-amd64
ENV GOOS=linux
ENV GOARCH=amd64
WORKDIR /app


RUN apk update && \
    apk add --no-cache git pkgconf wget

# Install Golang
RUN wget https://golang.org/dl/go1.23.5.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.23.5.linux-amd64.tar.gz

# Copy OpenCV libraries from the build stage
COPY --from=opencv-builder-amd64 /app/opencv/build/lib/* /usr/local/lib/
COPY --from=opencv-builder-amd64 /app/opencv/build/include/* /usr/local/include/ 
COPY --from=opencv-builder-amd64 /app/opencv/CMakeLists.txt /usr/local/share/OpenCV/
COPY --from=opencv-builder-arm64 /usr/local/lib/pkgconfig/opencv4.pc /usr/local/lib/pkgconfig/

# Clone the project repository and build the Go application
RUN git clone https://github.com/arabenjamin/gizmatron.git 

WORKDIR /app/gizmatron

RUN go mod download
RUN go get -u -d gocv.io/x/gocv
RUN go list -m gocv.io/x/gocv

# Set up pkg-config for OpenCV. This is very important!
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
RUN pkg-config --cflags --libs opencv4

ENV LD_LIBRARY_PATH /usr/local/lib
ENV CGO_CPPFLAGS -I/usr/local/include
ENV CGO_CXXFLAGS "--std=c++1z"
ENV CGO_LDFLAGS "-L/usr/local/lib -lopencv_core -lopencv_face -lopencv_videoio -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_objdetect -lopencv_features2d -lopencv_video -lopencv_dnn -lopencv_xfeatures2d -lopencv_plot -lopencv_tracking"


RUN go build -tags opencv-go -o gizmatron-amd64



###### Stage 4: Build Go for arm64 (Almost identical to amd64 stage)
FROM golang:1.23-alpine AS builder-arm64
ENV GOOS=linux
ENV GOARCH=arm64
WORKDIR /app

RUN apk update && \
    apk add --no-cache git pkgconf wget

# Install Golang
RUN wget https://golang.org/dl/go1.23.5.linux-arm64.tar.gz && \
    tar -C /usr/local -xzf go1.23.5.linux-arm64.tar.gz

COPY --from=opencv-builder-arm64 /app/opencv/build/lib/* /usr/local/lib/
COPY --from=opencv-builder-arm64 /app/opencv/build/include/* /usr/local/include/
COPY --from=opencv-builder-arm64 /app/opencv/CMakeLists.txt /usr/local/share/OpenCV/
COPY --from=opencv-builder-arm64 /usr/local/lib/pkgconfig/opencv4.pc /usr/local/lib/pkgconfig/


# Clone the project repository and build the Go application
RUN git clone https://github.com/arabenjamin/gizmatron.git 

WORKDIR /app/gizmatron

RUN go mod download

RUN go get -u -d gocv.io/x/gocv
RUN go list -m gocv.io/x/gocv    

# Set up pkg-config for OpenCV. This is very important!
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
RUN pkg-config --cflags --libs opencv4

ENV LD_LIBRARY_PATH /usr/local/lib
ENV CGO_CPPFLAGS -I/usr/local/include
ENV CGO_CXXFLAGS "--std=c++1z"
ENV CGO_LDFLAGS "-L/usr/local/lib -lopencv_core -lopencv_face -lopencv_videoio -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_objdetect -lopencv_features2d -lopencv_video -lopencv_dnn -lopencv_xfeatures2d -lopencv_plot -lopencv_tracking"


RUN go build -v -tags opencv-go -o gizmatron-arm64

# Stage 5: Create the final multi-platform image
FROM scratch AS final

COPY --from=builder-amd64 /app/gizmatron-amd64 /gizmatron-amd64
COPY --from=builder-arm64 /app/gizmatron-arm64 /gizmatron-arm64

# Copy necessary libraries (and other files) from the Go build stages.
# The Go build stages already copied the OpenCV libraries.
COPY --from=builder-amd64 /usr/local/lib/* /usr/local/lib/
COPY --from=builder-arm64 /usr/local/lib/* /usr/local/lib/

COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

EXPOSE 8080

ENTRYPOINT ["/entrypoint.sh"]

LABEL org.opencontainers.image.platform="linux/amd64,linux/arm64"

